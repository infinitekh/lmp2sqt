%!PS-Adobe-3.0
%%Title: analysis.c
%%For: kh
%%Creator: a2ps version 4.14
%%CreationDate: Thu Sep 29 10:39:36 2016
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 1
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 842 def
/sw 595 def
/llx 24 def
/urx 571 def
/ury 818 def
/lly 24 def
/#copies 1 def
/th 0.000000 def
/fnfs 11 def
/bfs 4.931785 def
/cw 2.959071 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 90.400000 mul
def
/ph
   792.537790 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 2.071350 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
0 T (/*) c n
0 T ( * =================================================================================) N
0 T (====) N
0 T ( *) N
0 T ( *       Filename:  analysis.cpp) N
(5) # ( *) N
0 T ( *    Description:  ) N
0 T ( *) N
0 T ( *        Version:  1.0) N
0 T ( *        Created:  2016\353M-^EM-^D 07\354M-^[M-^T 26\354M-^]\274 14\354M-^KM-^\\ 24\353\266M-^D 35\354\264M-^H) N
(10) # ( *       Revision:  none) N
0 T ( *       Compiler:  gcc) N
0 T ( *) N
0 T ( *         Author:  Ph.D. Candidate KIM Hyeok \(kh\), ekh0324@gmail.com) N
0 T ( *        Company:  Konkuk University) N
(15) # ( *) N
0 T ( * =================================================================================) N
0 T (====) N
0 T ( */) N
0 T () N
0 T () N
(20) # () S
(typedef) K
( ) p
(double) k
( real;) p n
0 T () S
(typedef) K
( ) p
(struct) k
( {) p n
0 T () S 4 T (real R, I;) N
0 T (} Cmplx;) N
0 T () S
(#include) K
( <stdio.h>) p n
(25) # () S
(#include) K
( <stdlib.h>) p n
0 T () S
(#include) K
( <string.h>) p n
0 T () S
(#include) K
( <math.h>) p n
0 T () S
(#include) K
( ") p
(snapshot.h) str
(") p n
0 T () S
(#include) K
( <errno.h>) p n
(30) # () N
0 T () N
0 T () S
(#define) K
( ALLOC\(type\) type*  alloc_ ## type\(size_t n\) { \\) p n
0 T () S 4 T (  ) S
(return) K
( \(type *\) malloc\() p
(sizeof) K
(\(type\)*n\); \\) p n
0 T (}) N
(35) # () S
(#define) K
( Min\(a,b\) \( \(a<b\)?\(a\):\(b\)\)) p n
0 T () S
(#define) K
( CSet\(a, x, y\) a.R = x, a.I = y) p n
0 T () S
(#define) K
( CAdd\(a, b, c\) a.R = b.R + c.R, a.I = b.I + c.I) p n
0 T () S
(#define) K
( CSub\(a, b, c\) a.R = b.R - c.R, a.I = b.I - c.I) p n
0 T () S
(#define) K
( CMul\(a, b, c\) a.R = b.R * c.R - b.I * c.I, a.I = b.R * c.I + b.I * c.R) p n
(40) # () S
(#define) K
( Sqr\(x\)     \( \(x\)*\(x\)\)) p n
0 T () S
(#define) K
( CHAR_MINUS ') p
(-) str
(') p n
0 T () S
(#define) K
( CHAR_ZERO  ') p
(0) str
('\342M-^@M-^Y) p n
0 T () S
(#define) K
( NameString\(x\)                     \\) p n
0 T () S
(if) K
( \() p
(\330) sy
( strncmp \(bp, #x, strlen \(#x\)\)\) { \\) p n
(45) # () S 4 T (bp += strlen \(#x\);                   \\) N
0 T () S 4 T (x = strtok \(bp, ") S
( ) str
("\);                \\) p n
0 T (}) N
0 T () S
(#define) K
( NameVal\(x\)                     \\) p n
0 T () S
(if) K
( \() p
(\330) sy
( strncmp \(bp, #x, strlen \(#x\)\)\) { \\) p n
(50) # () S 4 T (bp += strlen \(#x\);                   \\) N
0 T () S 4 T (x = strtod \(bp, &bp\);                \\) N
0 T (}) N
0 T () N
0 T () S
(#define) K
( BUFF_LEN 1024) p n
(55) # (ALLOC\() S
(double) k
(\); ALLOC\(real\); ALLOC\() p
(int) k
(\); ALLOC\(Cmplx\);) p n
0 T () S
(int) k
(  type[]    = { 1,   1,  1,  0 };) p n
0 T () S
(int) k
(  scail[]    = { 1,   1,  1,  0 };) p n
0 T () S
(char) k
( *header[] = {") p
(cur-long) str
(", ") p
(cur-trans) str
(", ") p
(density) str
(", ") p
(vanHove-self) str
("},) p n
0 T () S 4 T () S 8 T ( *txtCorr = ") S
(space-time corr) str
(";) p n
(60) # () S
(int) k
( nDataTypes = ) p
(sizeof) K
(\(header\)/) p
(sizeof) K
(\() p
(char) k
(*\);) p n
0 T () S
(void) k
( PrintHelp \( ) p
(char) k
( *pName\);) p n
0 T () S
(void) k
( FftComplex \(Cmplx *a, ) p
(int) k
( size\);) p n
0 T () S
(int) k
( main \( ) p
(int) k
( argc, ) p
(char) k
( **argv\)) p n
0 T ({) N
(65) # () S 4 T (Cmplx *work;) N
0 T () S 4 T (real *corrSum[nDataTypes], *corrSumSq[nDataTypes], *corrSumErr[nDataTypes],) N
0 T () S 4 T () S 8 T () S 12 T ( damp, deltaT, deltaTCorr,) N
0 T () S 4 T () S 8 T () S 12 T ( omegaMax, tMax, w,x,  kVal, kVal2, qVal, qVal2;) N
0 T () S 4 T (real valGamma, valDq, valSq;) N
(70) # () S 4 T () S
(int) k
( doFourier,doWindow;) p n
0 T () S 4 T () S
(int) k
( j,k,n,nT,nnT,cT,nData,nFunCorr,nSet,nSetSkip,) p n
0 T () S 4 T () S 8 T () S 12 T (nv, nValCorr;) N
0 T () S 4 T () S
(char) k
( *bp, *fName, buff[BUFF_LEN], *lmpFileName, output_filename[BUFF_LEN];) p n
0 T () S 4 T () S
(FILE) k
( *input, *output;) p n
(75) # () S 4 T (Snapshot* pSnap;) N
0 T () S
(/* ) c 4 T (int nDataTypes = sizeof\(header\);) N
0 T ( * ) S 4 T (int tempa      = sizeof\(char*\);) N
0 T ( * ) S 4 T (printf\( "%d %d \\n ", nDataTypes, tempa\);) N
0 T ( * ) S 4 T (exit\(1\);) N
(80) # ( */) N
0 T () N
0 T () S
() p 4 T () N
0 T () S 4 T () S
(/*-----------------------------------------------------------------------------) c n
0 T () S 4 T ( *  Argument Check!! And open a file.) N
(85) # () S 4 T ( *-----------------------------------------------------------------------------*) N
0 T (/) N
0 T () S
() p 4 T (n = 1;) N
0 T () S 4 T () S
(if) K
( \(-- argc <1 ) p
(\332) sy
( ) p
(\330) sy
( strcmp \(argv[1], ") p
(-h) str
("\)\) PrintHelp \(argv[0]\);) p n
0 T () S 4 T (doFourier =1;) N
0 T () S 4 T (doWindow =0;) N
(90) # () S 4 T (nSetSkip = 1;) N
0 T () S 4 T () S
(while) K
( \(-- argc ) p
(\263) sy
( 0\) {) p n
0 T () S 4 T () S 8 T () S
(if) K
( \() p
(\330) sy
( strcmp \(argv[n], ") p
(-t) str
("\)\) doFourier =0;) p n
0 T () S 4 T () S 8 T () S
(else) K
( ) p
(if) K
( \() p
(\330) sy
( strcmp \(argv[n], ") p
(-w) str
("\)\) doWindow =1;) p n
0 T () S 4 T () S 8 T () S
(else) K
( ) p
(if) K
( \() p
(\330) sy
( strcmp \(argv[n], ") p
(-s) str
("\)\) nSetSkip = atoi \(argv[n]+2\);) p n
(95) # () S 4 T () S 8 T () S
(else) K
( {) p n
0 T () S 4 T () S 8 T () S 12 T (fName = argv[n];) N
0 T () S 4 T () S 8 T () S 12 T () S
(break) K
(;) p n
0 T () S 4 T () S 8 T (}) N
0 T () S 4 T () S 8 T (++ n;) N
(100) # () S 4 T (}) N
0 T () S 4 T () N
0 T () S 4 T () S
(if) K
( \(argc >0\) PrintHelp \(argv[0]\);) p n
0 T () S 4 T (omegaMax = 10.;) N
0 T () S 4 T (tMax = 100.;) N
(105) # () N
0 T () S 4 T () S
(if) K
(\() p
(\330) sy
(strcmp\(fName,") p
(-) str
("\)\) {) p n
0 T () S 4 T () S 8 T (input = stdin;) N
0 T () S 4 T (} ) S
(else) K
( {) p n
0 T () S 4 T () S 8 T (input = fopen\(fName,") S
(r) str
("\);) p n
(110) # () S 4 T () S 8 T () S
(if) K
( \() p
(NULL) K
( ) p
(\272) sy
( input\) {) p n
0 T () S 4 T () S 8 T () S 12 T (fprintf\(stderr, ") S
(Unable to open '%s': %s\\n) str
(",) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (fName, strerror\(errno\)\);) N
0 T () S 4 T () S 8 T () S 12 T (exit\(EXIT_FAILURE\);) N
0 T () S 4 T () S 8 T (}) N
(115) # () S 4 T (}) N
0 T () S
(//) c 4 T (if\(\(input = fopen \(fName, "r"\)\) == 0\) {) N
0 T (//) S 4 T () S 8 T (printf \("no file : %s\\n", fName\);) N
0 T (//) S 4 T () S 8 T (fp) N
0 T (//) S 4 T () S 8 T (exit \(0\);) N
(120) # (//) S 4 T (}) N
0 T () N
0 T () S
() p 4 T () S
(while) K
( \(1\) {) p n
0 T () S 4 T () S 8 T (bp = fgets \(buff, BUFF_LEN, input\);) N
0 T () S 4 T () S 8 T () S
(if) K
( \(*bp ) p
(\272) sy
( CHAR_MINUS\) ) p
(break) K
(;) p n
(125) # () S 4 T () S 8 T (NameVal \(deltaT\);) N
0 T () S 4 T () S 8 T (NameVal \(nFunCorr\);) N
0 T () S 4 T () S 8 T (NameVal \(nValCorr\);) N
0 T () S 4 T () S 8 T (NameVal \(kVal\);) N
0 T () S
(//) c 4 T () S 8 T (NameString \(lmpFileName\);) N
(130) # () S
() p 4 T (}) N
0 T () S 4 T (deltaTCorr =  deltaT;) N
0 T () S 4 T (kVal2 = kVal*kVal;) N
0 T () N
0 T () S 4 T () S
(/*-----------------------------------------------------------------------------) c n
(135) # () S 4 T ( *   Alloc memory and initialization) N
0 T () S 4 T ( *-----------------------------------------------------------------------------*) N
0 T (/) N
0 T () S
() p 4 T () S
(for) K
( \(j = 0; j < nDataTypes; j ++\) {) p n
0 T () S 4 T () S 8 T (corrSum[j] = alloc_real\(nFunCorr * nValCorr\);) N
0 T () N
(140) # () S 4 T () S 8 T (corrSumSq[j] = alloc_real\( nFunCorr * nValCorr\);) N
0 T () S 4 T () S 8 T (corrSumErr[j] = alloc_real\( nFunCorr * nValCorr\);) N
0 T () S 4 T () S 8 T () S
(for) K
( \(n =0; n < nFunCorr* nValCorr; n++\) {) p n
0 T () S 4 T () S 8 T () S 12 T (corrSum [j][n] = 0.;) N
0 T () S 4 T () S 8 T () S 12 T (corrSumSq [j][n] = 0.;) N
(145) # () S 4 T () S 8 T (}) N
0 T () S 4 T (}) N
0 T () N
0 T () S 4 T () S
(// The Preamble) c n
0 T () S
() p 4 T () S
(if) K
( \(doFourier\)) p n
(150) # () S 4 T () S 8 T (work = alloc_Cmplx\( 2 * \(nValCorr -1\)\);) N
0 T () S 4 T (nData =0;) N
0 T () S 4 T (nSet =0;) N
0 T () S 4 T () S
(while) K
( \(1\) {) p n
0 T () S 4 T () S 8 T () S
(//) c 12 T () S 16 T (if \( NULL == \(pSnap = read_dump \(input \) \)\) break;) N
(155) # () S
() p 4 T () S 8 T () S
(if) K
( \() p
(\330) sy
( \(bp = fgets \(buff, BUFF_LEN, input\)\)\) ) p
(break) K
(;) p n
0 T () S 4 T () S 8 T () S
(if) K
( \() p
(\330) sy
( strncmp \(bp, txtCorr, strlen \(txtCorr\)\)\) {) p n
border
/v 1 store
/x0 x v get 2.071350 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
0 T () p 4 T () S 8 T () S 12 T (++ nSet;) N
0 T () S 4 T () S 8 T () S 12 T () S
(if) K
( \(nSet < nSetSkip\) ) p
(continue) K
(;) p n
0 T () S 4 T () S 8 T () S 12 T (++ nData;) N
(160) # () S 4 T () S 8 T () S 12 T () S
(for) K
( \( j =0; j < nDataTypes; j++\) {) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T (bp = fgets \(buff, BUFF_LEN, input\); ) S
(// header types check\(not comple) c n
0 T (ted\)) N
0 T () S
() p 4 T () S 8 T () S 12 T () S 16 T (printf\(") S
( header check : %s \\n) str
(", buff\);) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
( \( n =0; n<nValCorr; n ++\) {) p n
(165) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (bp = fgets \(buff, BUFF_LEN, input\);) N
0 T () N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(for) K
( \( k = 0; k < nFunCorr; k += 1 \) {) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (w = strtod \(bp, &bp\);) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (corrSum[j][k * nValCorr + n] += w;) N
(170) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (corrSumSq[j][k * nValCorr + n] += Sqr\(w\);) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T (}) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (bp = fgets \(buff, BUFF_LEN, input\);) S
(// null line) c n
0 T () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (printf\(") S
( endline null string default : %s \\n) str
(", buff\);) p n
(175) # () S 4 T () S 8 T () S 12 T (}) N
0 T () S 4 T () S 8 T (}) N
0 T () S 4 T (}) N
0 T () S 4 T (fclose \(input\);) N
0 T () S 4 T (printf \(") S
(%d\\n) str
(", nData\);) p n
(180) # ( ) N
0 T () S 4 T () S
(for) K
( \( j = 0; j < nDataTypes; j += 1 \) {) p n
0 T () S 4 T () S 8 T () S
(for) K
( \( n = 0; n < nFunCorr*nValCorr; n += 1 \) {) p n
0 T () S 4 T () S 8 T () S 12 T (corrSum[j][n] /= nData;) N
0 T () S 4 T () S 8 T () S 12 T (corrSumSq[j][n] = sqrt \( corrSumSq[j][n]/nData-Sqr\(corrSum[j][n]\)\);) N
(185) # () S 4 T () S 8 T () S 12 T (corrSumErr[j][n] =  corrSumSq[j][n]/ sqrt\(nData\);) N
0 T () S 4 T () S 8 T (}) N
0 T () S 4 T (}) N
0 T () N
0 T () S 4 T () N
(190) # () S 4 T () S
(if) K
( \(doFourier\) {) p n
0 T () S 4 T () S 8 T () N
0 T () S 4 T () S 8 T () S
(for) K
( \( j = 0; j < 3; j += 1 \) {) p n
0 T () S 4 T () S 8 T () S 12 T () S
(for) K
( \( k = 0; k < nFunCorr; k += 1 \) {) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
( \( n = 0; n < nValCorr; n += 1 \) {) p n
(195) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(doWindow\) damp = \(nValCorr - n \) / \(nValCorr +.5\);) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K
( damp = 1.;) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (CSet \(work[n], corrSum[j][k * nValCorr +n] * damp,0.\);) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T (}) N
0 T () N
(200) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
( \( n = nValCorr; n < 2*\(nValCorr-1\); n += 1 \) ) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (work[n] = work[2* \(nValCorr -1 \) - n ];) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T (FftComplex \(work, 2 * nValCorr -2\);) N
0 T () N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
( \( n = 0; n < nValCorr; n += 1 \) ) p n
(205) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (corrSum[j][k * nValCorr +n] = work[n].R;) N
0 T () S 4 T () S 8 T () S 12 T (}) N
0 T () S 4 T () S 8 T (}) N
0 T () S 4 T () S 8 T (omegaMax= Min\(omegaMax, M_PI / deltaTCorr\);) N
0 T () S 4 T () S 8 T (nv = nValCorr * omegaMax / \(M_PI / deltaTCorr\);) N
(210) # () S 4 T (}   ) S
(//  print A\(q,omega\) or A\(r,omega\)) c n
0 T () S
() p 4 T () S
(else) K
( {   ) p
(// print A\(q,t\), or A\(r,t\)) c n
0 T () S
() p 4 T () S 8 T () S
(for) K
( \( j = 0; j < nDataTypes; j += 1 \) {) p n
0 T () S 4 T () S 8 T () S 12 T () S
(if) K
( \(scail[j] \){) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*------------------------------------------------------------------) c n
0 T (-----------) N
(215) # () S 4 T () S 8 T () S 12 T () S 16 T ( *  D\(q\) ~ S\(q\) ~ or density and  spin longi,transverse) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T ( *------------------------------------------------------------------) N
0 T (-----------*/) N
0 T () S
() p 4 T () S 8 T () S 12 T () S 16 T (sprintf\( output_filename, ") S
(%s00.out) str
(", header[j] \);) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S
(FILE) k
( *output = fopen\( output_filename, ") p
(w) str
("\);) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T (fputs\(") S
(#kVal Sq Gamma Dq\\n) str
(", output\);) p n
(220) # () N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
( \(k = 0; k < nFunCorr; k ++\) {) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (qVal = \(k+1\)*kVal; qVal2=qVal*qVal;) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (cT= k*nValCorr; nnT = cT+2; nT = cT+1;    ) S
(//Forward O\(h^2\) first) c n
0 T ( Derivative) N
0 T () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (valSq    =   corrSum[j][cT];) N
(225) # () S
(#define) K
( Xp2 log\(corrSum[j][nnT]\)) p n
0 T () S
(#define) K
( Xp1 log\(corrSum[j][nT]\)) p n
0 T () S
(#define) K
( X   log\(corrSum[j][cT]\)) p n
0 T () S
(//) c 4 T () S 8 T () S 12 T () S 16 T () S 20 T (valGamma =) S 32 T ( \(-\(corrSum[j][nnT]\) +4.*\(corrSum[j][nT]\) -3.*\(corrS) N
0 T (um[j][cT]\) \)/ \(2.0* deltaT*corrSum[j][cT]\);) N
0 T () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (valGamma =   \( \(-Xp2+4.*Xp1 -3.* X \) / \(2.*deltaT \)\) ;  ) S
(// Forwa) c n
0 T (rd O\(h^2\) first Derivative) N
(230) # (//) S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (valGamma =   \( \(Xp1 - X \) / deltaT \) ;  // Forward O\(h\) first De) N
0 T (rivative) N
0 T () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (valDq    = - valGamma / \(qVal2\) ;) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (fprintf\( output, ") S
(%8.4e %8.4e %8.4e %8.4e %8.4e\\n) str
(", qVal, valSq,valGam) p n
0 T (ma,valDq, corrSumErr[j][cT]\); ) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T (}) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T (fclose\(output\);) N
(235) # () S 4 T () S 8 T () S 12 T () S 16 T () N
0 T () N
0 T () S
(//      scaling by function of  t=0) c n
0 T () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
( \( k = 0; k < nFunCorr; k += 1 \) {) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(for) K
( \( n = 1; n < nValCorr; n += 1 \) ) p n
(240) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (corrSum[j][k * nValCorr +n] /= corrSum[j][k*nValCorr];) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (corrSum[j][k * nValCorr] = 1.;) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T (}) N
0 T () S 4 T () S 8 T () S 12 T (}) N
0 T () S 4 T () S 8 T (}) N
(245) # () S 4 T () S 8 T (tMax = Min \( tMax, \(nValCorr -1\) * deltaTCorr\);) N
0 T () S 4 T () S 8 T (nv = nValCorr * tMax /  \(nValCorr - 1\) / deltaTCorr;) N
0 T () S 4 T () S 8 T (printf\(") S
(nv = %d, tMax = %f, nValCorr = %d, deltaTCorr = %f\\n) str
(" , nv ,tMax, nValCorr, delta) p n
0 T (TCorr\);) N
0 T () S 4 T (} ) S
(// else end) c n
0 T () S
(    ) p n
(250) # () S 4 T () S
(for) K
( \( j = 0; j < nDataTypes; j += 1 \) {) p n
0 T () S 4 T () S 8 T (printf\(") S
(%s\\n) str
(", header[j]\);) p n
0 T () S 4 T () S 8 T () S
(for) K
( \(n=0; n < nv; n++\) {) p n
0 T () S 4 T () S 8 T () S 12 T () S
(if) K
( \(doFourier\) x = n * omegaMax / nv;) p n
0 T () S 4 T () S 8 T () S 12 T () S
(else) K
( x = n * deltaTCorr;) p n
(255) # () S 4 T () S 8 T () S 12 T (printf \( ") S
(%9.4f) str
(", x\);) p n
0 T () S 4 T () S 8 T () S 12 T () N
0 T () S 4 T () S 8 T () S 12 T () S
(for) K
( \( k = 0; k < nFunCorr; k += 1 \) ) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T (printf \(") S
( %9.4f) str
(", corrSum[j][k * nValCorr +n]\);) p n
0 T () S 4 T () S 8 T () S 12 T (printf \(") S
(\\n) str
("\);) p n
(260) # () S 4 T () S 8 T (}) N
0 T () S 4 T (}) N
0 T (}) N
0 T () N
0 T () S
(void) k
( PrintHelp \( ) p
(char) k
( *pName\)) p n
(265) # ({) N
0 T () S 4 T (printf \(") S
(Usage: %s [-t{time_corr}] [-s{skip}n] [-w{window}]) str
(") p n
0 T () S 4 T () S 8 T () S 12 T ( ") S
( input-file \\n) str
(" ) p n
0 T () S 4 T () S 8 T () S 12 T ( ") S
( if you want to use stdin, you should used -  \\n) str
(") p n
0 T () S 4 T () S 8 T () S 12 T ( , pName\);) N
(270) # () S 4 T (exit\(0\);) N
0 T (}) N
0 T () N
0 T () S
(void) k
( FftComplex \(Cmplx *a, ) p
(int) k
( size\)) p n
0 T ({) N
(275) # () S 4 T (Cmplx t, w, wo;) N
0 T () S 4 T (real theta;) N
0 T () S 4 T () S
(int) k
( i, j, k, n;) p n
0 T () S 4 T (k = 0;) N
0 T () S 4 T () S
(for) K
( \(i = 0; i < size; i ++\) {) p n
(280) # () S 4 T () S 8 T () S
(if) K
( \(i < k\) {) p n
0 T () S 4 T () S 8 T () S 12 T (t = a[i];) N
0 T () S 4 T () S 8 T () S 12 T (a[i] = a[k];) N
0 T () S 4 T () S 8 T () S 12 T (a[k] = t;) N
0 T () S 4 T () S 8 T (}) N
(285) # () S 4 T () S 8 T (n = size / 2;) N
0 T () S 4 T () S 8 T () S
(while) K
( \(n ) p
(\263) sy
( 1 ) p
(\331) sy
( k ) p
(\263) sy
( n\) {) p n
0 T () S 4 T () S 8 T () S 12 T (k -= n;) N
0 T () S 4 T () S 8 T () S 12 T (n /= 2;) N
0 T () S 4 T () S 8 T (}) N
(290) # () S 4 T () S 8 T (k += n;) N
0 T () S 4 T (}) N
0 T () S 4 T () S
(for) K
( \(n = 1; n < size; n *= 2\) {) p n
0 T () S 4 T () S 8 T (theta = M_PI / n;) N
0 T () S 4 T () S 8 T (CSet \(wo, cos \(theta\) - 1., sin \(theta\)\);) N
(295) # () S 4 T () S 8 T (CSet \(w, 1., 0.\);) N
0 T () S 4 T () S 8 T () S
(for) K
( \(k = 0; k < n; k ++\) {) p n
0 T () S 4 T () S 8 T () S 12 T () S
(for) K
( \(i = k; i < size; i += 2 * n\) {) p n
0 T () S 4 T () S 8 T () S 12 T () S 16 T (j = i + n;) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T (CMul \(t, w, a[j]\);) N
(300) # () S 4 T () S 8 T () S 12 T () S 16 T (CSub \(a[j], a[i], t\);) N
0 T () S 4 T () S 8 T () S 12 T () S 16 T (CAdd \(a[i], a[i], t\);) N
0 T () S 4 T () S 8 T () S 12 T (}) N
0 T () S 4 T () S 8 T () S 12 T (CMul \(t, w, wo\);) N
0 T () S 4 T () S 8 T () S 12 T (CAdd \(w, w, t\);) N
(305) # () S 4 T () S 8 T (}) N
0 T () S 4 T (}) N
0 T (}) N
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
